[{"/Users/revSoul/Desktop/web projects/react/material-ui/spark-development/src/index.js":"1","/Users/revSoul/Desktop/web projects/react/material-ui/spark-development/src/reportWebVitals.js":"2","/Users/revSoul/Desktop/web projects/react/material-ui/spark-development/src/components/App.js":"3","/Users/revSoul/Desktop/web projects/react/material-ui/spark-development/src/components/ui/Header.js":"4","/Users/revSoul/Desktop/web projects/react/material-ui/spark-development/src/components/ui/Theme.js":"5"},{"size":496,"mtime":1607990345570,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1607981908323,"results":"8","hashOfConfig":"7"},{"size":1154,"mtime":1608160294825,"results":"9","hashOfConfig":"7"},{"size":7297,"mtime":1608329929202,"results":"10","hashOfConfig":"7"},{"size":629,"mtime":1608158602364,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1tozmce",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/revSoul/Desktop/web projects/react/material-ui/spark-development/src/index.js",[],["24","25"],"/Users/revSoul/Desktop/web projects/react/material-ui/spark-development/src/reportWebVitals.js",[],"/Users/revSoul/Desktop/web projects/react/material-ui/spark-development/src/components/App.js",[],"/Users/revSoul/Desktop/web projects/react/material-ui/spark-development/src/components/ui/Header.js",["26","27"],"import React, { useState, useEffect } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  useScrollTrigger,\n  Box,\n  Container,\n  Tab,\n  Tabs,\n  Button,\n  Menu,\n  MenuItem,\n  useMediaQuery,\n  SwipeableDrawer,\n  IconButton\n} from \"@material-ui/core\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nimport { Link } from \"react-router-dom\";\n\nimport logo from \"../../assets/webdev-logo.svg\";\n\nfunction ElevationScroll(props) {\n  const { children } = props;\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n  });\n\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0,\n  });\n}\n\nconst useStyles = makeStyles((theme) => ({\n  toolbarMargin: {\n    ...theme.mixins.toolbar,\n    marginBottom: \"3em\",\n    [theme.breakpoints.down(\"md\")]: {\n      marginBottom: \"2em\",\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginBottom: \"1.25em\",\n    },\n  },\n  logoContainer: {\n    padding: 0,\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  logo: {\n    height: \"8em\",\n    [theme.breakpoints.down(\"md\")]: {\n      height: \"7em\",\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      height: \"5.5em\",\n    },\n  },\n  tabContainer: {\n    marginLeft: \"auto\",\n  },\n  tab: {\n    ...theme.typography.tab,\n    minWidth: 10,\n    marginLeft: \"25px\",\n  },\n  button: {\n    ...theme.typography.estimate,\n    borderRadius: \"50px\",\n    marginLeft: \"50px\",\n    marginRight: \"25px\",\n    height: \"45px\",\n  },\n  menu: {\n    backgroundColor: theme.palette.common.blue,\n    color: \"white\",\n    borderRadius: \"0px\",\n  },\n  menuItem: {\n    ...theme.typography.tab,\n    opacity: 0.7,\n    \"&:hover\": {\n      opacity: 1,\n    },\n  },\n  drawerIconContainer: {\n    marginLeft: \"auto\",\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    }\n  },\n  drawerIcon: {\n    height: \"50px\",\n    width: \"50px\",\n  },\n}));\n\nexport default function Header(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  const matches = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const [value, setValue] = useState(0);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [openMenu, setOpenMenu] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  useEffect(() => {\n    switch (window.location.pathname) {\n      case \"/\":\n        if (value !== 0) {\n          setValue(0);\n        }\n        break;\n      case \"/services\":\n        if (value !== 1) {\n          setValue(1);\n          setSelectedIndex(0);\n        }\n        break;\n      case \"/customsoftware\":\n        if (value !== 1) {\n          setValue(1);\n          setSelectedIndex(1);\n        }\n        break;\n      case \"/mobileapps\":\n        if (value !== 1) {\n          setValue(1);\n          setSelectedIndex(2);\n        }\n        break;\n      case \"/websites\":\n        if (value !== 1) {\n          setValue(1);\n          setSelectedIndex(3);\n        }\n        break;\n      case \"/revolution\":\n        if (value !== 2) {\n          setValue(2);\n        }\n        break;\n      case \"/about\":\n        if (value !== 3) {\n          setValue(3);\n        }\n        break;\n      case \"/contact\":\n        if (value !== 4) {\n          setValue(4);\n        }\n        break;\n      case \"/estimate\":\n        if (value !== 5) {\n          setValue(5);\n        }\n        break;\n      default:\n        break;\n    }\n  }, [value]);\n\n  const handleChange = (e, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleClick = (e) => {\n    // 'currentTarget' = element that was clicked\n    setAnchorEl(e.currentTarget);\n    setOpenMenu(true);\n  };\n\n  const handleClose = (e) => {\n    setAnchorEl(null);\n    setOpenMenu(false);\n  };\n\n  const handleMenuItemClick = (e, i) => {\n    setAnchorEl(e.currentTarget);\n    setOpenMenu(true);\n    setSelectedIndex(i);\n  };\n\n  const menuOptions = [\n    { name: \"Services\", link: \"/services\" },\n    { name: \"Custom Software Development\", link: \"/customsoftware\" },\n    { name: \"Mobile App Development\", link: \"/mobileapps\" },\n    { name: \"Website Development\", link: \"/websites\" },\n  ];\n\n  const tabs = (\n    <>\n      <Tabs\n        value={value}\n        onChange={handleChange}\n        className={classes.tabContainer}\n        indicatorColor=\"primary\"\n      >\n        <Tab className={classes.tab} component={Link} to=\"/\" label=\"Home\" />\n        <Tab\n          aria-owns={anchorEl ? \"simple-menu\" : undefined}\n          aria-haspopup={anchorEl ? \"true\" : undefined}\n          className={classes.tab}\n          component={Link}\n          onMouseOver={(event) => handleClick(event)}\n          to=\"/services\"\n          label=\"Services\"\n        />\n        <Tab\n          className={classes.tab}\n          component={Link}\n          to=\"/revolution\"\n          label=\"The Revolution\"\n        />\n        <Tab\n          className={classes.tab}\n          component={Link}\n          to=\"/about\"\n          label=\"About Us\"\n        />\n        <Tab\n          className={classes.tab}\n          component={Link}\n          to=\"/contact\"\n          label=\"Contact Us\"\n        />\n      </Tabs>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.button}\n        component={Link}\n        to=\"/estimate\"\n      >\n        Free Estimate\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        open={openMenu}\n        onClose={handleClose}\n        MenuListProps={{ onMouseLeave: handleClose }}\n        elevation={0}\n        classes={{ paper: classes.menu }}\n      >\n        {menuOptions.map((option, i) => (\n          <MenuItem\n            key={option}\n            classes={{ root: classes.menuItem }}\n            component={Link}\n            to={option.link}\n            onClick={(event) => {\n              handleMenuItemClick(event, i);\n              setValue(1);\n              handleClose();\n            }}\n            selected={i === selectedIndex && value === 1}\n          >\n            {option.name}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n\n  const drawer = (\n    <>\n      <SwipeableDrawer\n        disableBackdropTransition={!iOS}\n        disableDiscovery={iOS}\n        open={openDrawer}\n        onClose={() => setOpenDrawer(false)}\n        onOpen={() => setOpenDrawer(true)}\n      >\n        Example Drawer\n      </SwipeableDrawer>\n      <IconButton className={classes.drawerIconContainer} onClick={() => setOpenDrawer(!openDrawer)} disableRipple>\n        <MenuIcon className={classes.drawerIcon} />\n      </IconButton>\n    </>\n  );\n\n  return (\n    <>\n      <ElevationScroll>\n        <AppBar position=\"fixed\">\n          <Toolbar disableGutters>\n            <Button\n              component={Link}\n              to=\"/\"\n              onClick={() => setValue(0)}\n              className={classes.logoContainer}\n              disableRipple\n            >\n              <img src={logo} alt=\"company logo\" className={classes.logo} />\n            </Button>\n\n            {matches ? drawer : tabs}\n          </Toolbar>\n        </AppBar>\n      </ElevationScroll>\n      {/* div with attr adds spacing below toolbar to show following element */}\n      <div className={classes.toolbarMargin} />\n    </>\n  );\n}\n","/Users/revSoul/Desktop/web projects/react/material-ui/spark-development/src/components/ui/Theme.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":6,"column":3,"nodeType":"34","messageId":"35","endLine":6,"endColumn":6},{"ruleId":"32","severity":1,"message":"36","line":7,"column":3,"nodeType":"34","messageId":"35","endLine":7,"endColumn":12},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","no-global-assign","no-unsafe-negation"]